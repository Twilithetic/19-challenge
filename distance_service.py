import cv2
import numpy as np
import time
from multiprocessing import Process, Queue

def find_largest_rectangle(image):
    """????????????"""
    # ??????
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # ??????
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # ????
    edges = cv2.Canny(blurred, 50, 150)
    
    # ????
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # ??????
    max_area = 0
    largest_rect = None
    
    for cnt in contours:
        # ?????
        epsilon = 0.02 * cv2.arcLength(cnt, True)
        approx = cv2.approxPolyDP(cnt, epsilon, True)
        
        # ??????
        if len(approx) == 4:
            area = cv2.contourArea(approx)
            if area > max_area:
                max_area = area
                largest_rect = approx
    
    return largest_rect, max_area

def calculate_distance_cm(pixel_area, real_area_cm2, pixel_to_cm=0.5):
    """
    ???????????????cm?
    
    ??:
    - pixel_area: ???????
    - real_area_cm2: ????????cm�?
    - pixel_to_cm: 1???????????0.5cm/????5mm/???
    
    ??:
    - ???cm?
    """
    # ??????????????cm�?
    pixel_area_cm2 = pixel_area * (pixel_to_cm ** 2)
    
    # ???? = (????)/(????) = (??/??)^2
    # ??????????????????????
    distance_cm = np.sqrt(real_area_cm2 / pixel_area_cm2) * np.sqrt(real_area_cm2)
    
    return distance_cm

def distance_calculation_service(result_queue: Queue, control_queue: Queue):
    """????????????????????"""
    # ???????A4?????????470cm�?
    REAL_AREA_CM2 = 470
    
    # ?????
    cap = cv2.VideoCapture(0)
    
    # ????????
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
    
    running = False
    last_distance = 0
    
    print("????????????????...")
    
    while True:
        # ??????
        if not control_queue.empty():
            command = control_queue.get()
            if command == "START":
                running = True
                print("???????")
            elif command == "STOP":
                running = False
                print("???????")
            elif command == "EXIT":
                break
        
        if running:
            # ???
            ret, frame = cap.read()
            if not ret:
                print("????????")
                break
            
            # ??????
            rect, pixel_area = find_largest_rectangle(frame)
            
            if rect is not None:
                # ????
                distance = calculate_distance_cm(pixel_area, REAL_AREA_CM2) * 10
                last_distance = distance
                
                # ???????
                result_queue.put(distance)
            else:
                # ??????????????????
                result_queue.put(last_distance)
            
            # ????
            time.sleep(0.1)
        else:
            # ??????None?????
            result_queue.put(None)
            time.sleep(0.5)
    
    # ????
    cap.release()
    print("?????????")    